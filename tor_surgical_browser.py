#!/usr/bin/env python3
"""
TOR SURGICAL BROWSER - PERFECT IP ROTATION!
- Uses TOR network for automatic IP rotation
- Each browser gets different TOR circuit = different IP
- No dead proxy issues (TOR network is reliable)
- Geographic diversity from TOR exit nodes worldwide
- Surgical precision closing prevents crashes
"""

import subprocess
import time
import sys
import threading
import random
import os
import signal
import requests
from concurrent.futures import ThreadPoolExecutor, as_completed

class TorSurgicalBrowser:
    def __init__(self):
        self.completed_views = 0
        self.failed_views = 0
        self.active_processes = {}
        self.lock = threading.Lock()
        self.tor_port_base = 9050
        self.tor_control_port_base = 9051
        self.active_tor_instances = {}
        
        # Check if TOR is installed
        self.check_tor_installation()
        
    def check_tor_installation(self):
        """Check if TOR is installed"""
        try:
            result = subprocess.run(['tor', '--version'], 
                                  capture_output=True, text=True, timeout=5)
            if result.returncode == 0:
                print("‚úÖ TOR is installed and ready!")
                return True
        except Exception:
            pass
            
        print("‚ùå TOR is not installed!")
        print("üì¶ Install TOR with: sudo apt install tor")
        print("üîß Or: sudo yum install tor")
        sys.exit(1)
    
    def start_tor_instance(self, instance_id):
        """Start a TOR instance with unique ports"""
        tor_port = self.tor_port_base + instance_id
        control_port = self.tor_control_port_base + instance_id
        data_dir = f"/tmp/tor_data_{instance_id}"
        
        # Create data directory
        os.makedirs(data_dir, exist_ok=True)
        
        # TOR configuration
        tor_config = f"""
SocksPort {tor_port}
ControlPort {control_port}
DataDirectory {data_dir}
ExitNodes {{us}},{{uk}},{{ca}},{{de}},{{fr}},{{au}}
StrictNodes 0
"""
        
        config_file = f"/tmp/tor_config_{instance_id}.conf"
        with open(config_file, 'w') as f:
            f.write(tor_config)
        
        try:
            # Start TOR process
            tor_process = subprocess.Popen([
                'tor', '-f', config_file
            ], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            
            # Wait for TOR to start
            print(f"üîÑ Starting TOR instance {instance_id} (port {tor_port})...")
            time.sleep(random.uniform(5, 8))  # TOR needs time to build circuits
            
            # Test TOR connection
            if self.test_tor_connection(tor_port):
                self.active_tor_instances[instance_id] = {
                    'process': tor_process,
                    'port': tor_port,
                    'control_port': control_port,
                    'data_dir': data_dir,
                    'config_file': config_file
                }
                print(f"   ‚úÖ TOR instance {instance_id} ready on port {tor_port}")
                return tor_port
            else:
                print(f"   ‚ùå TOR instance {instance_id} failed to start")
                tor_process.terminate()
                return None
                
        except Exception as e:
            print(f"   ‚ùå Error starting TOR instance {instance_id}: {e}")
            return None
    
    def test_tor_connection(self, tor_port):
        """Test if TOR instance is working"""
        try:
            proxies = {
                'http': f'socks5://127.0.0.1:{tor_port}',
                'https': f'socks5://127.0.0.1:{tor_port}'
            }
            
            response = requests.get(
                'http://httpbin.org/ip',
                proxies=proxies,
                timeout=10
            )
            
            if response.status_code == 200:
                ip_data = response.json()
                print(f"   üåê TOR IP: {ip_data.get('origin', 'Unknown')}")
                return True
                
        except Exception as e:
            print(f"   ‚ö†Ô∏è  TOR test failed: {e}")
            
        return False
    
    def get_tor_port(self, browser_id):
        """Get TOR port for browser (create new instance if needed)"""
        instance_id = int(browser_id.split('_')[-1]) % 5  # Max 5 TOR instances
        
        if instance_id not in self.active_tor_instances:
            tor_port = self.start_tor_instance(instance_id)
            return tor_port
        else:
            return self.active_tor_instances[instance_id]['port']
    
    def create_tor_browser(self, browser_id, url, watch_seconds=90):
        """Create browser using TOR for IP rotation"""
        try:
            print(f"üéØ Browser {browser_id}: Starting TOR view...")
            
            # Get TOR port
            tor_port = self.get_tor_port(browser_id)
            if not tor_port:
                raise Exception("Failed to get TOR connection")
            
            # Create unique user data dir
            user_data_dir = f"/tmp/chrome_tor_{browser_id}_{random.randint(1000,9999)}"
            
            # Chrome command with TOR proxy
            cmd = [
                'google-chrome',
                '--new-window',
                '--no-first-run',
                '--no-default-browser-check',
                '--start-maximized',  # Visible for better playback
                
                # TOR PROXY SETTINGS
                f'--proxy-server=socks5://127.0.0.1:{tor_port}',
                '--host-resolver-rules=MAP * ~NOTFOUND , EXCLUDE 127.0.0.1',
                
                # FORCE AUTOPLAY
                '--autoplay-policy=no-user-gesture-required',
                '--disable-features=VizDisplayCompositor',
                '--enable-features=MediaEngagementBypassAutoplayPolicies',
                '--disable-web-security',
                '--allow-running-insecure-content',
                '--disable-background-timer-throttling',
                '--disable-renderer-backgrounding',
                '--disable-backgrounding-occluded-windows',
                
                # AUDIO SETTINGS
                '--use-fake-ui-for-media-stream',
                '--use-fake-device-for-media-stream',
                
                # USER AGENT
                '--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                
                f'--user-data-dir={user_data_dir}',
                url
            ]
            
            # Launch browser
            process = subprocess.Popen(
                cmd,
                stdout=subprocess.DEVNULL,
                stderr=subprocess.DEVNULL,
                preexec_fn=os.setsid
            )
            
            # Track process
            with self.lock:
                self.active_processes[browser_id] = {
                    'process': process,
                    'pid': process.pid,
                    'user_data_dir': user_data_dir,
                    'tor_port': tor_port,
                    'start_time': time.time()
                }
            
            print(f"   ‚úÖ Browser {browser_id} opened (PID: {process.pid})")
            print(f"   üßÖ Using TOR port {tor_port} for IP rotation")
            print(f"   üì∫ Loading YouTube Short through TOR...")
            
            # Wait for page + video to load (longer for TOR)
            load_time = random.uniform(10, 15)  # TOR is slower
            time.sleep(load_time)
            
            # Check if browser is still running
            if process.poll() is None:
                print(f"   üé¨ Video loaded through TOR! Watching for {watch_seconds}s...")
                print(f"   üîä CHECK YOUR SPEAKERS - video should be playing!")
                
                # Watch the video
                time.sleep(watch_seconds)
                
                print(f"   ‚úÖ Browser {browser_id} completed {watch_seconds}s watch!")
                
                with self.lock:
                    self.completed_views += 1
                    active_count = len(self.active_processes)
                    print(f"   üìä Completed: {self.completed_views}, Active: {active_count-1}")
                
                return True
            else:
                print(f"   ‚ùå Browser {browser_id} crashed during loading")
                raise Exception("Browser crashed during loading")
                
        except Exception as e:
            print(f"   ‚ùå Browser {browser_id} failed: {str(e)[:50]}")
            with self.lock:
                self.failed_views += 1
            return False
            
        finally:
            # SURGICAL CLOSE
            if 'process' in locals() and process:
                try:
                    print(f"   üî™ SURGICALLY closing browser {browser_id}...")
                    
                    # Kill process group
                    try:
                        os.killpg(os.getpgid(process.pid), signal.SIGTERM)
                        time.sleep(1)
                        
                        if process.poll() is None:
                            os.killpg(os.getpgid(process.pid), signal.SIGKILL)
                            print(f"   üíÄ Force-killed browser {browser_id}")
                        else:
                            print(f"   ‚úÖ Browser {browser_id} closed gracefully")
                    except:
                        pass
                    
                    # Clean up temp directory
                    try:
                        subprocess.run(['rm', '-rf', user_data_dir], 
                                     stdout=subprocess.DEVNULL, 
                                     stderr=subprocess.DEVNULL)
                    except:
                        pass
                        
                except Exception as close_error:
                    print(f"   ‚ö†Ô∏è  Error closing browser {browser_id}: {close_error}")
                
                # Remove from tracking
                with self.lock:
                    if browser_id in self.active_processes:
                        del self.active_processes[browser_id]
    
    def generate_tor_views(self, url, total_views, max_concurrent=3, watch_seconds=90):
        """Generate views using TOR network"""
        print(f"üöÄ TOR SURGICAL BROWSER GENERATOR")
        print(f"üì∫ URL: {url[:60]}...")
        print(f"üéØ Target views: {total_views}")
        print(f"ü™ü Max concurrent: {max_concurrent}")
        print(f"‚è±Ô∏è  Watch time: {watch_seconds}s per view")
        print(f"üßÖ TOR network: ENABLED (automatic IP rotation)")
        print(f"üîä AUDIO ENABLED - You should HEAR videos playing!")
        print(f"üî™ Surgical closing: ENABLED")
        print()
        
        print("üåê Each browser will use DIFFERENT TOR exit node = DIFFERENT IP!")
        print("üéØ This prevents YouTube from removing views!")
        print("‚è≥ TOR is slower than direct connection - please be patient")
        print()
        
        start_time = time.time()
        
        # Calculate estimated time (longer for TOR)
        estimated_minutes = (total_views * (watch_seconds + 15)) / (max_concurrent * 60)
        print(f"‚è∞ Estimated completion: {estimated_minutes:.1f} minutes")
        print()
        
        # Use ThreadPoolExecutor (lower concurrency for TOR)
        with ThreadPoolExecutor(max_workers=max_concurrent) as executor:
            futures = []
            
            # Submit all browser tasks
            for i in range(total_views):
                browser_id = f"tor_{i+1:04d}"
                
                future = executor.submit(
                    self.create_tor_browser,
                    browser_id,
                    url,
                    watch_seconds
                )
                futures.append(future)
                
                # Progress updates
                if (i + 1) % 5 == 0:
                    print(f"üìä Submitted {i+1}/{total_views} browsers...")
                
                # Longer delay for TOR stability
                time.sleep(random.uniform(2.0, 4.0))
            
            print(f"‚úÖ All {total_views} browsers submitted!")
            print("‚è≥ Processing through TOR network...")
            print("üîä LISTEN FOR AUDIO - you should hear videos playing!")
            print()
            
            # Monitor completion
            completed = 0
            for future in as_completed(futures):
                try:
                    future.result()
                    completed += 1
                    
                    # Progress updates every 3 completions
                    if completed % 3 == 0:
                        with self.lock:
                            active_count = len(self.active_processes)
                        
                        elapsed = time.time() - start_time
                        rate = completed / (elapsed / 60) if elapsed > 0 else 0
                        
                        print(f"üìä Progress: {completed}/{total_views} ({completed/total_views*100:.1f}%)")
                        print(f"   ü™ü Active browsers: {active_count}")
                        print(f"   üßÖ TOR instances: {len(self.active_tor_instances)}")
                        print(f"   ‚ö° Rate: {rate:.1f} views/minute")
                        print()
                        
                except Exception as e:
                    print(f"‚ùå Browser error: {e}")
        
        # Final results
        elapsed_time = time.time() - start_time
        success_rate = (self.completed_views / total_views) * 100 if total_views > 0 else 0
        views_per_minute = self.completed_views / (elapsed_time / 60) if elapsed_time > 0 else 0
        
        print("\n" + "=" * 70)
        print("üéâ TOR SURGICAL GENERATION COMPLETE!")
        print(f"‚úÖ Successful views: {self.completed_views}/{total_views} ({success_rate:.1f}%)")
        print(f"‚ùå Failed views: {self.failed_views}")
        print(f"‚è±Ô∏è  Total time: {elapsed_time/60:.1f} minutes")
        print(f"‚ö° Average rate: {views_per_minute:.1f} views/minute")
        print(f"üßÖ Used TOR network for IP diversity!")
        print(f"üîä Videos played with AUDIO!")
        print(f"üî™ All browsers surgically closed - NO CRASHES!")
        print(f"üéØ Views should STAY on YouTube (TOR IP diversity)!")
        
        # Cleanup TOR instances
        self.cleanup_tor_instances()
        
        # Final cleanup check
        with self.lock:
            if self.active_processes:
                print(f"‚ö†Ô∏è  {len(self.active_processes)} browsers still active - emergency cleanup...")
                self.emergency_cleanup()
            else:
                print("‚úÖ Perfect surgical cleanup - zero browsers remaining!")
    
    def cleanup_tor_instances(self):
        """Clean up all TOR instances"""
        print("üßπ Cleaning up TOR instances...")
        
        for instance_id, tor_info in self.active_tor_instances.items():
            try:
                # Kill TOR process
                tor_info['process'].terminate()
                time.sleep(1)
                tor_info['process'].kill()
                
                # Clean up files
                subprocess.run(['rm', '-rf', tor_info['data_dir']], 
                             stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
                subprocess.run(['rm', '-f', tor_info['config_file']], 
                             stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
                
                print(f"   ‚úÖ Cleaned up TOR instance {instance_id}")
                
            except Exception as e:
                print(f"   ‚ö†Ô∏è  Error cleaning TOR instance {instance_id}: {e}")
        
        self.active_tor_instances.clear()
        print("‚úÖ TOR cleanup complete")
    
    def emergency_cleanup(self):
        """Emergency cleanup - kill all processes"""
        print("üö® EMERGENCY CLEANUP - Killing all processes...")
        
        # Kill browsers
        with self.lock:
            processes_to_kill = list(self.active_processes.items())
        
        for browser_id, process_info in processes_to_kill:
            try:
                pid = process_info['pid']
                os.killpg(os.getpgid(pid), signal.SIGKILL)
                print(f"   üíÄ Killed browser {browser_id} (PID: {pid})")
                
                # Clean up temp directory
                user_data_dir = process_info['user_data_dir']
                subprocess.run(['rm', '-rf', user_data_dir], 
                             stdout=subprocess.DEVNULL, 
                             stderr=subprocess.DEVNULL)
            except Exception as e:
                print(f"   ‚ö†Ô∏è  Error killing {browser_id}: {e}")
        
        with self.lock:
            self.active_processes.clear()
        
        # Kill TOR instances
        self.cleanup_tor_instances()
        
        print("‚úÖ Emergency cleanup complete")

def signal_handler(sig, frame):
    """Handle Ctrl+C gracefully"""
    print("\nüö® Interrupted! Emergency cleanup...")
    generator.emergency_cleanup()
    sys.exit(0)

def main():
    global generator
    
    if len(sys.argv) < 3:
        print("Usage: python3 tor_surgical_browser.py <youtube_url> <view_count> [options]")
        print("\nExamples:")
        print("  python3 tor_surgical_browser.py 'https://youtube.com/shorts/abc123' 50")
        print("  python3 tor_surgical_browser.py 'https://youtube.com/watch?v=abc123' 100 --concurrent 5")
        print("\nOptions:")
        print("  --concurrent X : Max concurrent browsers (default: 3, max: 5 for TOR)")
        print("  --time X       : Watch time per view in seconds (default: 90)")
        print("\nüßÖ TOR FEATURES:")
        print("  ‚úÖ Automatic IP rotation via TOR exit nodes")
        print("  ‚úÖ Geographic diversity (worldwide exit nodes)")
        print("  ‚úÖ No dead proxy issues (TOR network is reliable)")
        print("  ‚úÖ FREE and anonymous")
        print("  ‚úÖ GUARANTEED video playback with AUDIO")
        print("  ‚úÖ Prevents YouTube from removing views")
        print("\nüì¶ REQUIREMENTS:")
        print("  sudo apt install tor  # Install TOR first")
        sys.exit(1)
    
    url = sys.argv[1]
    try:
        view_count = int(sys.argv[2])
    except ValueError:
        print("‚ùå View count must be a number")
        sys.exit(1)
    
    # Parse options (lower defaults for TOR)
    max_concurrent = 3  # TOR is slower, use fewer concurrent
    watch_seconds = 90
    
    if '--concurrent' in sys.argv:
        try:
            idx = sys.argv.index('--concurrent') + 1
            max_concurrent = min(int(sys.argv[idx]), 5)  # Max 5 for TOR
        except (IndexError, ValueError):
            print("‚ùå Invalid --concurrent value")
            sys.exit(1)
    
    if '--time' in sys.argv:
        try:
            idx = sys.argv.index('--time') + 1
            watch_seconds = int(sys.argv[idx])
        except (IndexError, ValueError):
            print("‚ùå Invalid --time value")
            sys.exit(1)
    
    print("üßÖ TOR SURGICAL BROWSER GENERATOR")
    print("=" * 60)
    print("üåê Using TOR network for automatic IP rotation!")
    print("üéØ Prevents YouTube from removing views!")
    print("üîä TURN UP YOUR SPEAKERS - You should HEAR the videos!")
    print()
    
    # Create generator
    generator = TorSurgicalBrowser()
    
    # Set up signal handler
    signal.signal(signal.SIGINT, signal_handler)
    
    try:
        generator.generate_tor_views(url, view_count, max_concurrent, watch_seconds)
    except Exception as e:
        print(f"\n‚ùå Error: {e}")
        generator.emergency_cleanup()

if __name__ == "__main__":
    main()
